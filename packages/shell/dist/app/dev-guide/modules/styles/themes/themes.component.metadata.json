[{"__symbolic":"module","version":3,"metadata":{"ThemesComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"sme-ng2-themes","template":"\n      <div class=\"sme-layout-absolute sme-position-inset-none sme-documentation\">\n          <h1>Themes</h1>\n          <section>\n              <p>There are 2 themes in SME:</p>\n              <ul>\n                  <li>light</li>\n                  <li>dark</li>\n              </ul>\n              <p>These themes are automatically applied base on the users settings to the body element in each module.</p>\n              <p>Theming in SME is more extensive than just changing color. It can include color, font, icons, spacing and more.</p>\n          </section>\n\n          <h2>Theme Classes</h2>\n          <section>\n              <p>The class for the current theme is always applied to the 'body' element for you. However there are some cases where a specific theme need to be applied. When nessecary you can use the following classes:\n              </p>\n              <table>\n                  <thead>\n                      <tr>\n                          <th>Class</th>\n                          <th>Effect</th>\n                      </tr>\n                  </thead>\n                  <tbody>\n                      <tr>\n                          <td>.sme-theme-light</td>\n                          <td>Applies the light theme</td>\n                      </tr>\n                      <tr>\n                          <td>.sme-theme-dark</td>\n                          <td>Applies the light theme</td>\n                      </tr>\n                  </tbody>\n              </table>\n          </section>\n\n          <h2>Custom Themed Components</h2>\n          <section>\n              <p>There are several ways to apply css to your components based on the current theme. You must account for the target them and nested theming structures. Examples are done for the dark theme.</p>\n\n              <h3>CSS</h3>\n              <p>In CSS, simply prepend the theme to the selector </p>\n              <code>.sme-theme-dark .my-class, \n      .sme-theme-light .sme-theme-dark .my-class {{'{'}} \n          /* Themed Style*/\n      }</code>\n\n              <h3>SCSS</h3>\n              <p>In SCSS, you can use the ancestor selector syntax. </p>\n              <code>.my-class {{'{'}}\n          .sme-theme-dark &,\n          .sme-theme-light .sme-theme-dark & {{'{'}}\n              /* Themed Style*/\n          }\n      }</code>\n\n              <h3>Shadow DOM UX Frameworks</h3>\n              <p>Some frameworks that utilize shadow dom for components (such as Angular 2) enable a special syntax to style components based on classes outside the current component</p>\n              <p>This syntax will be the same as the two methods listed above, however the :host-context selector should be used instead of the raw theme class.</p>\n              <p>The example below uses the host-context selector for the css of a component</p>\n              <code>:host-context(.sme-theme-dark)</code>\n              <code>:host-context(.sme-theme-dark) .my-class, \n      :host-context(.sme-theme-light .sme-theme-dark) .my-class {{'{'}} \n          /* Themed Style*/\n      }</code>\n          </section>\n      </div>\n    "}]}],"statics":{"navigationTitle":{"__symbolic":"function","parameters":["appContextService","snapshot"],"value":"Themes"}}}}},{"__symbolic":"module","version":1,"metadata":{"ThemesComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"sme-ng2-themes","template":"\n      <div class=\"sme-layout-absolute sme-position-inset-none sme-documentation\">\n          <h1>Themes</h1>\n          <section>\n              <p>There are 2 themes in SME:</p>\n              <ul>\n                  <li>light</li>\n                  <li>dark</li>\n              </ul>\n              <p>These themes are automatically applied base on the users settings to the body element in each module.</p>\n              <p>Theming in SME is more extensive than just changing color. It can include color, font, icons, spacing and more.</p>\n          </section>\n\n          <h2>Theme Classes</h2>\n          <section>\n              <p>The class for the current theme is always applied to the 'body' element for you. However there are some cases where a specific theme need to be applied. When nessecary you can use the following classes:\n              </p>\n              <table>\n                  <thead>\n                      <tr>\n                          <th>Class</th>\n                          <th>Effect</th>\n                      </tr>\n                  </thead>\n                  <tbody>\n                      <tr>\n                          <td>.sme-theme-light</td>\n                          <td>Applies the light theme</td>\n                      </tr>\n                      <tr>\n                          <td>.sme-theme-dark</td>\n                          <td>Applies the light theme</td>\n                      </tr>\n                  </tbody>\n              </table>\n          </section>\n\n          <h2>Custom Themed Components</h2>\n          <section>\n              <p>There are several ways to apply css to your components based on the current theme. You must account for the target them and nested theming structures. Examples are done for the dark theme.</p>\n\n              <h3>CSS</h3>\n              <p>In CSS, simply prepend the theme to the selector </p>\n              <code>.sme-theme-dark .my-class, \n      .sme-theme-light .sme-theme-dark .my-class {{'{'}} \n          /* Themed Style*/\n      }</code>\n\n              <h3>SCSS</h3>\n              <p>In SCSS, you can use the ancestor selector syntax. </p>\n              <code>.my-class {{'{'}}\n          .sme-theme-dark &,\n          .sme-theme-light .sme-theme-dark & {{'{'}}\n              /* Themed Style*/\n          }\n      }</code>\n\n              <h3>Shadow DOM UX Frameworks</h3>\n              <p>Some frameworks that utilize shadow dom for components (such as Angular 2) enable a special syntax to style components based on classes outside the current component</p>\n              <p>This syntax will be the same as the two methods listed above, however the :host-context selector should be used instead of the raw theme class.</p>\n              <p>The example below uses the host-context selector for the css of a component</p>\n              <code>:host-context(.sme-theme-dark)</code>\n              <code>:host-context(.sme-theme-dark) .my-class, \n      :host-context(.sme-theme-light .sme-theme-dark) .my-class {{'{'}} \n          /* Themed Style*/\n      }</code>\n          </section>\n      </div>\n    "}]}],"statics":{"navigationTitle":{"__symbolic":"function","parameters":["appContextService","snapshot"],"value":"Themes"}}}}}]